#!/usr/bin/env node

/* Posting */

var { request } = require('http'),
    FormData = require('form-data'),
    jsdom = require('jsdom'),
    { JSDOM } = jsdom,
    fs = require('fs'),
    path = require('path'),
    error = require('../lib/erroron')

var file = 'post',
    host = 'localhost',
    port = '3000',
    url = '/login',
    url_post = '/post',
    url_upload = '/upload',
    name = 'e',
    pwd = 'e'

req_token()
    .then(login)
    .then(auths => loadfile(file)
	  .then(data => post(data, auths)))
    .catch(e => console.error(e))

function __request(options, data) {
    var req, restype,
	reqtype = options.headers ? options.headers['content-type'] : null,
    	expjson = /^(?:application\/json|application\/json;\s?charset=utf-8)$/,
	expform = /^multipart\/form-data/

    return new Promise((resolve, reject) => {
	req = request(options)
	    .on('response', res => {
		var data = '',
		    { statusCode, statusMessage } = res
		
		restype = res.headers['content-type']	    		
		res
		    .on('data', chunk => data += chunk)
		    .on('end', () => {
			try {
			    if (expjson.test(restype)) {
				data = JSON.parse(data)
			    }
			    
			    if (statusCode != 200) {
				res.resume()
				reject(error.new(data.error.status, data.error.message))
			    } else {
				resolve(data)
			    }
			} catch (e) {}
		    })
	    })
	    .on('error', reject)

	if (options.method == 'GET') {
	    req.end()
	} else if (data) {
	    if (expform.test(reqtype)) {
		data.pipe(req)
	    } else {
		req.write(JSON.stringify(data))
		req.end()
	    }
	}
    })
}

function __readfile (path, encoding, handle) {
    return new Promise((resolve, reject) => {
	fs.readFile(path, encoding, (e, data) => {
	    if (e) {
		reject(e)
	    } else {
		resolve(handle ? handle(data) : data)
	    }
	})
    })
}

function loadfile (path, encoding) {
    return __readfile(path, encoding || 'utf8', parse)
}

function req_token() {
    return __request(
	{
	    host: host,
	    port: port,
	    path: url,
	    method: 'GET'
	}
    )
}

function login (auths) {
    return __request(
	{
	    host: host,
	    port: port,
	    path: url,
	    method: 'POST',
	    headers: { 'content-type': 'application/json' }
	},
	{
	    token: auths.token || auths,
	    username: name,
	    password: pwd
	}
    )
}

function post (data, auths) {
    var stream, files, promises = [],
	form = new FormData()
    
    if (files = data.upload) {
	delete data.upload

	files.forEach(e => {
	    stream = fs.createReadStream(e)
	    form.append('images', stream)
	})
	
    	promises.push(
    	    __request(
    		{
		    host: host,
		    port: port,
		    path: url_upload,
    		    method: 'POST',
		    headers: form.getHeaders()
    		},
    		form
    	    )
		.catch(e => console.error(e.message))
    	)
    }

    promises.push(
    	__request(
    	    {
		host: host,
		port: port,
		path: url_post,
    		method: 'POST',
    		headers: { 'content-type': 'application/json' }
    	    },
    	    {
    		token: auths.token,
    		user: auths.user,
    		post: data
    	    }
    	)
	    .catch(e => console.error(e.message))
    )

    return Promise.all(promises)
	.then(res =>
	      res.forEach(e => e != void 0 && console.log(e)))
}

async function parse (data) {
    return await JSDOM.fromFile(file, { resources: 'usable' })
	.then(dom => {
	    var doc = dom.window.document,
		body = doc.body
	    
	    var title = body.removeChild(body.children[0]).innerHTML,
		time = body.removeChild(body.children[0]).innerHTML,
		{ upload, content } = __parse(body.innerHTML)

	    for (var nodes = body.childNodes, e = 0; e < 2; e++) {
		if (nodes[e].nodeType == 3 && /^\s+/.test(nodes[e].nodeValue)) {
		    nodes[e--].remove()
		}
	    }

	    return {
		title: title,
		time: time,
		content: content,
		upload: upload
	    }
	})
	.catch (e => console.error(e))

    function __parse (html) {
	var dom = new JSDOM(html),
	    doc = dom.window.document,
	    parsed = {}, upload = []
	    
	doc.querySelectorAll('img').forEach((e, _) => {
	    var filename, local, src, img,
		reg = /^.+\/(.+\.png|jpg|jpeg)$/,
		s = reg.exec(e.src)

	    if (s) {
		local = s[0]
		filename = s[1]
		src = e.src = '/pub/images/' + filename
		upload.push(local)
	    }
	})

	parsed.content = doc.body.innerHTML
	if (upload.length) {
	    parsed.upload = upload
	}
	
	return parsed
    }
}
